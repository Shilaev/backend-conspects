## Структура программы
Программа Go хранится в **одном или нескольких файлах**, с расширением **.go**.
1) Файл начинается с объявления **package** - указывает частью какого пакета является файл.
2) Затем **import** - импортирует другие пакеты
3) Затем последовательность объявления типов, п еременных, констант, функций уровня пакета в произвольном порядке.

```Go
package main
import "fmt"
const someConst = 9.85
func main(){
    var f = someConst
}
```

## Переменные
Объявление **var** создает переменную определенного типа, назначает ей имя и присваивает начальноее значение.
**Полное объявление переменных**
```Go
var varName type = expression // полное указание
var varName = expression // компилятор сам определит тип
var varName type // создаст переменную с нулевым дефолтным
                  //значением (0, false, nil, "")
var i, j, k int // создаст 3 int с нулевым значением
var i, j, k = true, 2.3, "some" // создаст 3 переменные со
                          //значениями, которые указаны далее.
```
**Краткое объявление переменных**
```Go
name := expression
anim := gif.GIF{...}
t := 0.0
x, y := true, 1
```
Краткое объявление переменных может исопльзоваться для вызова функций.
```Go
f, err := os.Open(name)
```
!!Важно. В данном случае err не пересоздастся, а к ней будет присвоено новое значение
```Go
in, err := os.Open()
out, err := os.Create()
```

## Указатели
Переменная представляет собой небольшой блок памяти, содержащий значение.
Значение **указателя** представляет собой **адрес** переменной. Таким образом, **указатель** - это **местоположение в памяти**, где **хранится значение**. Не любое значение имеет адрес, но его имеет любая переменная. С помощью указателя можно считывать или изменять значение переменной косвенно, не используя ее имя, если оно есть.
```Go
var x int
p := &x // указатель на местоположение в памяти, указывает на значение
// p указывает на x
// p содержит адрес x
print(*p) // Это переменная, которую мы найдем, если перейдем по адресу, который хранится внутри p.
```

## Функция new
Еще один способ создания переменных. **new** создает неименованную переменную типа T, инициализирует ее нулевым значением и возвращает ее адрес.
```Go
p := new(int)
```

## Присваивание кортежу поменять местами
Очень удобно менять местами переменные, без добавления временной переменной.
Данная запись
```Go
tmp := x
x = y
y = tmp % y
```
эквивалентна этой, в короткой записи
```Go
x, y = y, x%y
```

## Объявление типов
Объявление type определяет новый именованный тип, который имеет тот же базовый тип, что и существующий.
```Go
type Celsius float64
const AbsoluteZeroC Celsius = -273.15
```

## Пакеты и файлы
Это аналог модулей и библиотек из других языков.
В Go экспортируются идентификаторы. которые начинаются с прописной буквы.
То есть если написать функцию
```Go
func doThis() {
	fmt.Println("doThis")
}
```
То она не будет доступна вне пакета, а если написать
```Go
func DoThis() {
	fmt.Println("doThis")
}

package.DoThis()
```
То вот она будет доступна